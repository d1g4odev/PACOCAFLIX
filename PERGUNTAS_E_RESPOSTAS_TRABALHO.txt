üé¨ PERGUNTAS E RESPOSTAS - TRABALHO PA√áOCAFLIX
================================================================

üìã PERGUNTAS FREQUENTES SOBRE O PROJETO

Este documento cont√©m perguntas que podem ser feitas durante a 
apresenta√ß√£o do trabalho, com respostas preparadas e detalhadas.

================================================================
‚ùì PERGUNTA 1: ARQUITETURA E TECNOLOGIAS
================================================================

PERGUNTA:
"Explique a arquitetura do sistema PA√áOCAFLIX. Por que voc√™s escolheram 
Angular e Spring Boot? Como eles se comunicam?"

RESPOSTA:
"O PA√áOCAFLIX utiliza uma arquitetura cliente-servidor com separa√ß√£o 
clara entre frontend e backend:

üèóÔ∏è ARQUITETURA:
- Frontend: Angular 13 rodando na porta 4200
- Backend: Spring Boot rodando na porta 8080  
- Banco: H2 Database em arquivo
- API Externa: TMDB para dados de filmes

ü§ù COMUNICA√á√ÉO:
- Frontend e Backend se comunicam via HTTP/REST
- Dados trafegam em formato JSON
- Angular usa HttpClient para fazer requisi√ß√µes
- Spring Boot exp√µe endpoints REST (@GetMapping, @PostMapping)

‚úÖ JUSTIFICATIVA DAS ESCOLHAS:

Angular:
- Framework robusto para SPAs (Single Page Applications)
- TypeScript oferece tipagem est√°tica
- Componentes reutiliz√°veis e modulares
- Programa√ß√£o reativa com RxJS
- Grande comunidade e documenta√ß√£o

Spring Boot:
- Framework Java maduro e enterprise
- Auto-configura√ß√£o reduce boilerplate
- Ecossistema Spring completo (Data, Web, Security)
- Facilita cria√ß√£o de APIs REST
- Integra√ß√£o simples com bancos de dados

H2 Database:
- Banco em mem√≥ria/arquivo para desenvolvimento
- Zero configura√ß√£o necess√°ria
- Console web integrado para visualiza√ß√£o
- Ideal para prototipagem e demonstra√ß√µes

Esta combina√ß√£o permite desenvolvimento √°gil, separa√ß√£o de responsabilidades 
e facilita manuten√ß√£o e escalabilidade."

================================================================
‚ùì PERGUNTA 2: FUNCIONALIDADES E INTEGRA√á√ÉO COM API EXTERNA
================================================================

PERGUNTA:
"Quais s√£o as principais funcionalidades implementadas? Como voc√™s 
integraram com a API do TMDB? Que desafios enfrentaram?"

RESPOSTA:
"O PA√áOCAFLIX implementa um sistema completo de gerenciamento de filmes 
com as seguintes funcionalidades:

üöÄ FUNCIONALIDADES PRINCIPAIS:

Autentica√ß√£o:
- Cadastro e login de usu√°rios
- Prote√ß√£o de rotas privadas
- Sess√£o persistente durante navega√ß√£o

Navega√ß√£o de Filmes:
- Lista de filmes populares (da TMDB)
- Filmes em cartaz nos cinemas
- Busca por nome do filme
- Filtros por g√™nero
- Detalhes completos com trailers

Intera√ß√£o Social:
- Sistema de favoritos por usu√°rio
- Avalia√ß√µes com estrelas (1-5)
- Coment√°rios e reviews
- Listagem de filmes favoritos

üåê INTEGRA√á√ÉO COM TMDB:

Implementa√ß√£o:
- Service no Angular (movie-db.service.ts)
- Endpoints para diferentes tipos de busca
- Cache local para otimizar performance
- Mapeamento de dados para modelos internos

Dados Consumidos:
- Filmes populares e em cartaz
- Detalhes completos dos filmes
- Posters e imagens em alta qualidade
- Trailers e v√≠deos relacionados
- Informa√ß√µes de g√™neros

üõ†Ô∏è DESAFIOS ENFRENTADOS:

1. Rate Limiting da TMDB:
   Solu√ß√£o: Implementamos cache local e throttling

2. Estrutura de Dados Complexa:
   Solu√ß√£o: Criamos DTOs e mapeamento personalizado

3. Performance de Imagens:
   Solu√ß√£o: Lazy loading e placeholders

4. Integra√ß√£o Frontend-Backend:
   Solu√ß√£o: Padroniza√ß√£o de APIs e tratamento de erros

5. Responsividade:
   Solu√ß√£o: CSS Grid, Flexbox e Angular Material

A integra√ß√£o com a TMDB permite que o sistema tenha dados reais e 
atualizados, criando uma experi√™ncia mais rica para o usu√°rio."

================================================================
‚ùì PERGUNTA 3: APRENDIZADOS E VALOR ACAD√äMICO
================================================================

PERGUNTA:
"O que voc√™s aprenderam desenvolvendo este projeto? Como ele aplica 
os conceitos vistos em aula? Qual o diferencial do trabalho?"

RESPOSTA:
"Este projeto foi fundamental para aplicar na pr√°tica diversos conceitos 
te√≥ricos, proporcionando aprendizado significativo:

üéì APRENDIZADOS T√âCNICOS:

Desenvolvimento Full-Stack:
- Integra√ß√£o real entre frontend e backend
- Comunica√ß√£o via APIs REST
- Gerenciamento de estado entre camadas
- Deploy e configura√ß√£o de ambiente

Programa√ß√£o Orientada a Objetos:
- Entidades JPA com relacionamentos
- Modelos TypeScript tipados
- Padr√µes de projeto (Repository, Service, DTO)
- Inje√ß√£o de depend√™ncia

Banco de Dados:
- Modelagem relacional normalizada
- Consultas JPA/JPQL
- Relacionamentos 1:N (User->Favorites, User->Evaluations)
- Configura√ß√£o e migra√ß√£o de esquemas

üìö CONCEITOS DE AULA APLICADOS:

Engenharia de Software:
- Arquitetura em camadas (MVC)
- Separa√ß√£o de responsabilidades
- Versionamento com Git
- Documenta√ß√£o t√©cnica

Desenvolvimento Web:
- Protocolo HTTP e m√©todos REST
- Serializa√ß√£o JSON
- CORS e comunica√ß√£o cross-origin
- Single Page Applications (SPA)

Experi√™ncia do Usu√°rio:
- Interface responsiva
- Feedback visual para a√ß√µes
- Tratamento de erros amig√°vel
- Loading states e navega√ß√£o intuitiva

‚ú® DIFERENCIAIS DO PROJETO:

1. Integra√ß√£o Real:
   - API externa (TMDB) com dados atuais
   - N√£o √© apenas um CRUD b√°sico
   - Funcionalidades avan√ßadas (favoritos, avalia√ß√µes)

2. Tecnologias Modernas:
   - Angular com TypeScript
   - Spring Boot com programa√ß√£o reativa
   - Documenta√ß√£o autom√°tica (Swagger)

3. Experi√™ncia Completa:
   - Sistema autenticado
   - Interface profissional
   - Performance otimizada
   - Responsive design

4. Boas Pr√°ticas:
   - C√≥digo limpo e documentado
   - Tratamento de exce√ß√µes
   - Valida√ß√µes frontend e backend
   - Estrutura modular

üöÄ VALOR EDUCACIONAL:

Este projeto demonstra capacidade de:
- Resolver problemas reais de desenvolvimento
- Integrar m√∫ltiplas tecnologias
- Trabalhar com APIs externas
- Criar aplica√ß√µes escal√°veis e maint√≠veis
- Aplicar padr√µes arquiteturais

O resultado √© uma aplica√ß√£o funcional que simula um ambiente de 
produ√ß√£o real, preparando para desafios profissionais e demonstrando 
dom√≠nio das tecnologias estudadas."

================================================================
üí° DICAS PARA APRESENTA√á√ÉO
================================================================

DESTAQUE SEMPRE:
‚úÖ A integra√ß√£o real com API externa
‚úÖ A arquitetura bem estruturada
‚úÖ As funcionalidades al√©m do b√°sico
‚úÖ Os desafios t√©cnicos superados
‚úÖ A aplica√ß√£o pr√°tica dos conceitos

DEMONSTRE CONHECIMENTO:
‚úÖ Explique decis√µes arquiteturais
‚úÖ Mostre o c√≥digo funcionando
‚úÖ Cite tecnologias e conceitos
‚úÖ Relate problemas e solu√ß√µes
‚úÖ Conecte teoria com pr√°tica

================================================================
üé¨ PA√áOCAFLIX - Demonstrando excel√™ncia t√©cnica e acad√™mica
================================================================ 