üé¨ COMANDOS PARA INICIAR O PROJETO CINEAPP - GUIA COMPLETO
================================================================

üìã PR√â-REQUISITOS (INSTALAR ANTES DE COME√áAR)
================================================================

1. Java JDK 11 ou superior
   - Download: https://www.oracle.com/java/technologies/downloads/
   - Ou OpenJDK: https://adoptium.net/

2. Node.js (vers√£o 14 ou superior)
   - Download: https://nodejs.org/

3. Angular CLI
   - Instalar globalmente: npm install -g @angular/cli

4. Git (se ainda n√£o tiver)
   - Download: https://git-scm.com/

================================================================
üöÄ COMANDOS PASSO A PASSO PARA INICIAR O PROJETO
================================================================

M√âTODO 1: USANDO OS SCRIPTS AUTOM√ÅTICOS (RECOMENDADO)
------------------------------------------------------

1. Abra o PowerShell como Administrador

2. Navegue at√© a pasta do projeto:
   cd "C:\Users\Rodrigo\OneDrive\Desktop\CINEAPP"

3. Execute o script de inicializa√ß√£o:
   .\start-system.ps1

4. Aguarde o sistema inicializar (5-10 minutos na primeira vez)

5. Os servi√ßos ficar√£o dispon√≠veis em:
   - Frontend: http://localhost:4200
   - Backend API: http://localhost:8080
   - Swagger (Documenta√ß√£o API): http://localhost:8080/swagger-ui.html
   - H2 Database Console: http://localhost:8080/h2-console

================================================================

M√âTODO 2: COMANDOS MANUAIS PASSO A PASSO
-----------------------------------------

PASSO 1: PREPARAR O AMBIENTE
----------------------------
1. Abra o PowerShell

2. Navegue at√© o diret√≥rio do projeto:
   cd "C:\Users\Rodrigo\OneDrive\Desktop\CINEAPP"

3. Verifique se Java est√° instalado:
   java -version

4. Configure JAVA_HOME se necess√°rio:
   $env:JAVA_HOME = "C:\Program Files\Java\jdk-17"

5. Verifique se Node.js est√° instalado:
   node --version

6. Verifique se Angular CLI est√° instalado:
   ng version

PASSO 2: CONFIGURAR E INICIAR O BACKEND (Spring Boot)
-----------------------------------------------------
1. Entre na pasta do backend:
   cd movies-api

2. Compile o projeto (primeira vez):
   .\mvnw clean compile

3. Execute os testes (opcional):
   .\mvnw test

4. Inicie o backend:
   .\mvnw spring-boot:run

5. Aguarde a mensagem: "Started MoviesApiApplication"

6. Teste se o backend est√° funcionando:
   - Abra navegador em: http://localhost:8080/swagger-ui.html

PASSO 3: CONFIGURAR E INICIAR O FRONTEND (Angular)
--------------------------------------------------
IMPORTANTE: Abra um NOVO terminal/PowerShell (deixe o backend rodando)

1. Navegue para a pasta principal:
   cd "C:\Users\Rodrigo\OneDrive\Desktop\CINEAPP"

2. Entre na pasta do frontend:
   cd movies-front

3. Instale as depend√™ncias (primeira vez ou ap√≥s atualiza√ß√µes):
   npm install

4. Inicie o servidor de desenvolvimento:
   npm start
   OU
   ng serve

5. Aguarde a mensagem: "webpack compiled successfully"

6. Acesse o sistema:
   - Abra navegador em: http://localhost:4200

================================================================
üóÑÔ∏è CONFIGURA√á√ÉO DO BANCO DE DADOS H2
================================================================

O projeto usa banco H2 em arquivo (n√£o precisa Docker/PostgreSQL)

Para acessar o console H2:
1. V√° para: http://localhost:8080/h2-console
2. Configure:
   - JDBC URL: jdbc:h2:file:./data/movies-api
   - Username: sa
   - Password: password
3. Clique em "Connect"

================================================================
üîß COMANDOS √öTEIS DURANTE O DESENVOLVIMENTO
================================================================

PARAR O SISTEMA:
----------------
- Para parar usando script: .\stop-system.ps1
- Para parar manualmente: Ctrl + C nos terminais do backend e frontend

REINICIAR APENAS O FRONTEND:
----------------------------
1. Pare o frontend (Ctrl + C)
2. Na pasta movies-front: npm start

REINICIAR APENAS O BACKEND:
---------------------------
1. Pare o backend (Ctrl + C)
2. Na pasta movies-api: .\mvnw spring-boot:run

LIMPAR E RECOMPILAR BACKEND:
----------------------------
cd movies-api
.\mvnw clean install

LIMPAR CACHE DO FRONTEND:
-------------------------
cd movies-front
npm cache clean --force
rm -rf node_modules
npm install

================================================================
üåê URLS IMPORTANTES DO SISTEMA
================================================================

Frontend (Interface do usu√°rio):
- http://localhost:4200

Backend API:
- http://localhost:8080

Documenta√ß√£o da API (Swagger):
- http://localhost:8080/swagger-ui.html

Console do Banco H2:
- http://localhost:8080/h2-console

API Endpoints principais:
- GET http://localhost:8080/movie/list
- POST http://localhost:8080/user/login
- POST http://localhost:8080/user/register

================================================================
‚ùå SOLU√á√ÉO DE PROBLEMAS COMUNS
================================================================

ERRO: "Port 4200 is already in use"
-----------------------------------
1. Pare todos os processos: Ctrl + C
2. Execute: npx kill-port 4200
3. Reinicie: npm start

ERRO: "Port 8080 is already in use"
-----------------------------------
1. Pare todos os processos: Ctrl + C
2. Execute: npx kill-port 8080
3. Reinicie: .\mvnw spring-boot:run

ERRO: "JAVA_HOME not found"
-----------------------------
1. Verifique instala√ß√µes do Java:
   Get-ChildItem "C:\Program Files\Java" -Directory
   
2. Configure JAVA_HOME temporariamente (para sess√£o atual):
   $env:JAVA_HOME = "C:\Program Files\Java\jdk-17"
   
3. Configure JAVA_HOME permanentemente:
   [Environment]::SetEnvironmentVariable("JAVA_HOME", "C:\Program Files\Java\jdk-17", "User")
   
4. Reinicie o PowerShell e teste:
   echo $env:JAVA_HOME

ERRO: "mvnw is not recognized"
------------------------------
1. Use: java -jar target/*.jar
2. Ou instale Maven globalmente

ERRO: "ng is not recognized"
----------------------------
1. Instale Angular CLI: npm install -g @angular/cli
2. Reinicie o terminal

ERRO: Depend√™ncias do npm
-------------------------
1. Delete pasta node_modules
2. Delete package-lock.json
3. Execute: npm install

================================================================
üìù LOGS E VERIFICA√á√ïES
================================================================

Para verificar se est√° tudo funcionando:

1. Backend rodando:
   - Veja no terminal: "Started MoviesApiApplication"
   - Teste: http://localhost:8080/swagger-ui.html

2. Frontend rodando:
   - Veja no terminal: "webpack compiled successfully"
   - Teste: http://localhost:4200

3. Banco H2 funcionando:
   - Console: http://localhost:8080/h2-console
   - Dados carregados automaticamente via data.sql

================================================================
üìû COMANDOS DE TESTE
================================================================

Testar API obrigat√≥ria:
.\test-api-obrigatoria.ps1

Testar avalia√ß√µes:
.\test-avaliacoes.ps1

Testar sistema completo:
.\test-system.ps1

Teste r√°pido:
.\quick-test.ps1

================================================================
üéØ PRIMEIRA EXECU√á√ÉO - CHECKLIST
================================================================

‚ñ° Java 11+ instalado
‚ñ° Node.js instalado
‚ñ° Angular CLI instalado
‚ñ° Estar na pasta do projeto
‚ñ° Backend compilou sem erros
‚ñ° Frontend instalou depend√™ncias
‚ñ° Ambos servi√ßos est√£o rodando
‚ñ° http://localhost:4200 carrega
‚ñ° http://localhost:8080/swagger-ui.html carrega
‚ñ° Consegue fazer login/cadastro

================================================================

üéâ PROJETO INICIALIZADO COM SUCESSO!
O sistema estar√° dispon√≠vel em http://localhost:4200

Para parar: Ctrl + C nos terminais ou execute .\stop-system.ps1 