üé¨ EXPLICA√á√ÉO DA API DE AVALIA√á√ïES - PA√áOCAFLIX
================================================================

üìã RESUMO: Sistema de Avalia√ß√µes de Filmes

Este documento explica de forma simples como funciona o sistema de 
avalia√ß√µes do PA√áOCAFLIX, desde o frontend at√© o backend.

================================================================
üîß BACKEND (Spring Boot) - API REST
================================================================

1. SALVAR AVALIA√á√ÉO
-------------------
Endpoint: POST /evaluation/save

C√≥digo:
@PostMapping("/save")
public Mono<Evaluation> save(@RequestBody Evaluation evaluation) {
    Evaluation savedEvaluation = this.evaluationService.save(evaluation);
    return Mono.just(savedEvaluation);
}

O que faz:
‚úÖ Recebe uma avalia√ß√£o (nota + coment√°rio) do frontend
‚úÖ Salva no banco de dados H2
‚úÖ Retorna confirma√ß√£o de que foi salvo

Em portugu√™s simples:
"Quando algu√©m enviar uma avalia√ß√£o, eu salvo no banco e confirmo"

2. BUSCAR AVALIA√á√ïES POR FILME
-----------------------------
Endpoint: GET /evaluation/findEvaluationsByMovie?idMovie={id}

C√≥digo:
@GetMapping("/findEvaluationsByMovie")
public Mono<?> findEvaluationsByMovie(@RequestParam("idMovie") Long id) {
    return Mono.just(evaluationService.findEvaluationsByMovie(id));
}

O que faz:
‚úÖ Busca todas as avalia√ß√µes de um filme espec√≠fico
‚úÖ Retorna lista com notas e coment√°rios daquele filme

Em portugu√™s simples:
"Me d√™ o ID do filme que eu mostro todas as avalia√ß√µes dele"

================================================================
üåê FRONTEND (Angular) - Interface do Usu√°rio
================================================================

FUN√á√ÉO PARA ENVIAR AVALIA√á√ÉO
-----------------------------

C√≥digo:
submitEvaluation(): void {
    let evaluationData: Evaluation = {
        authorName: this.authorName,
        score: this.userRating,
        comment: this.comment,
        movie: this.movieData
    }
    
    this.movieDbService.saveEvaluation(evaluationData).subscribe({
        next: (response) => {
            alert('Avalia√ß√£o salva com sucesso!');
            this.loadEvaluations(this.movie.id);
        }
    });
}

O que faz:
‚úÖ Pega dados que o usu√°rio preencheu (nome, nota, coment√°rio)
‚úÖ Organiza tudo em um objeto "evaluationData"
‚úÖ Envia para o backend via HTTP
‚úÖ Mostra mensagem "Avalia√ß√£o salva com sucesso!"
‚úÖ Recarrega lista de avalia√ß√µes para mostrar a nova

================================================================
üîÑ FLUXO COMPLETO DO SISTEMA
================================================================

PASSO A PASSO:

1. üë§ USU√ÅRIO
   - Digita nome do autor
   - Escolhe nota (1-5 estrelas)
   - Escreve coment√°rio sobre o filme

2. üåê FRONTEND (Angular)
   - Pega esses dados do formul√°rio
   - Monta objeto com todas as informa√ß√µes
   - Envia via HTTP POST para o backend

3. ‚öôÔ∏è BACKEND (Spring Boot)
   - Recebe os dados no endpoint /save
   - Salva no banco de dados H2
   - Retorna confirma√ß√£o de sucesso

4. ‚úÖ RETORNO
   - Frontend recebe confirma√ß√£o
   - Mostra mensagem de sucesso
   - Atualiza lista de avalia√ß√µes automaticamente

5. üìã RESULTADO
   - Usu√°rio v√™ sua avalia√ß√£o na lista
   - Outros usu√°rios tamb√©m podem ver
   - Dados ficam salvos permanentemente

================================================================
üéØ EXEMPLO PR√ÅTICO
================================================================

Cen√°rio: Jo√£o quer avaliar o filme "Vingadores"

1. Jo√£o acessa detalhes do filme
2. Preenche formul√°rio:
   - Nome: "Jo√£o Silva"
   - Nota: 5 estrelas
   - Coment√°rio: "Filme incr√≠vel, efeitos espetaculares!"

3. Clica em "Enviar Avalia√ß√£o"

4. Sistema processa:
   Frontend ‚Üí Backend ‚Üí Banco de Dados ‚Üí Confirma√ß√£o

5. Jo√£o v√™:
   - Mensagem: "Avalia√ß√£o salva com sucesso!"
   - Sua avalia√ß√£o aparece na lista
   - Nota contribui para m√©dia do filme

================================================================
üìä TECNOLOGIAS ENVOLVIDAS
================================================================

BACKEND:
- Spring Boot (Framework Java)
- Spring Web (API REST)
- JPA/Hibernate (Banco de dados)
- H2 Database (Banco em mem√≥ria)
- Maven (Gerenciamento de depend√™ncias)

FRONTEND:
- Angular 13 (Framework TypeScript)
- TypeScript (Linguagem tipada)
- RxJS (Programa√ß√£o reativa)
- HTTP Client (Comunica√ß√£o com API)

COMUNICA√á√ÉO:
- HTTP/REST (Protocolo de comunica√ß√£o)
- JSON (Formato de dados)
- Observables (Gerenciamento de dados ass√≠ncronos)

================================================================
üí° CONCEITOS IMPORTANTES
================================================================

API REST:
- Endpoint: URL espec√≠fica para uma fun√ß√£o
- POST: Enviar dados (criar/salvar)
- GET: Buscar dados (listar/consultar)
- @RequestBody: Dados vindo no corpo da requisi√ß√£o
- @RequestParam: Par√¢metros na URL

PROGRAMA√á√ÉO REATIVA:
- Mono: Container para um √∫nico valor ass√≠ncrono
- Observable: Stream de dados que pode ser observado
- Subscribe: "Escutar" quando dados chegam

ARQUITETURA:
- Controller: Recebe requisi√ß√µes HTTP
- Service: Cont√©m l√≥gica de neg√≥cio
- Repository: Acessa banco de dados
- Entity: Representa tabela do banco

================================================================
üéì APRENDIZADOS DEMONSTRADOS
================================================================

1. Desenvolvimento Full-Stack
2. Comunica√ß√£o Frontend-Backend
3. API REST com Spring Boot
4. Interface reativa com Angular
5. Persist√™ncia de dados
6. Experi√™ncia do usu√°rio (UX)
7. Programa√ß√£o orientada a objetos
8. Padr√µes arquiteturais (MVC)

================================================================

Este sistema de avalia√ß√µes demonstra uma implementa√ß√£o completa
de CRUD (Create, Read) com tecnologias modernas, seguindo boas
pr√°ticas de desenvolvimento web.

üé¨ PA√áOCAFLIX - Sistema desenvolvido para trabalho acad√™mico
================================================================ 